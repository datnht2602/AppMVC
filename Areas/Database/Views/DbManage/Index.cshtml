@using Microsoft.EntityFrameworkCore
@using System.Data


@inject ApplicationDBContext dbContext
@{
    ViewData["Title"] = "DB INFOR";
    var connect = dbContext.Database.GetDbConnection();
    var dbname = connect.Database;
    var can_connect = dbContext.Database.CanConnect();
}
<partial name ="_AlertMessage"/>
<h1>Database Management</h1>
<p>-Database: @dbname</p>
<p>-Source: @connect.DataSource</p>
<p>-State: @connect.State</p>
<hr>
<h2>Migrations</h2>
@foreach (var migrations in dbContext.Database.GetAppliedMigrations())
{
    <p>@migrations</p>
}
@foreach (var migrations in dbContext.Database.GetPendingMigrations())
{
    <p>@migrations (pending)</p>
}
@if(!can_connect){
    <p class="alert alert-danger">Cannot connect to DB</p>
}
@if(dbContext.Database.GetPendingMigrations().Any()){
    <form method="post">
        <button class="btn btn-success" asp-action="Migrate">Create DB(Update Migration)</button>
    </form>
}
@if (can_connect)
{
    <h2>Tables</h2>
    await dbContext.Database.OpenConnectionAsync();
    var table = dbContext.Database.GetDbConnection().GetSchema("Tables");
    <ul>
    @foreach (System.Data.DataRow item in table.Rows)
    {
        <li>@item["TABLE_NAME"]</li>
        
    }
    </ul>
    <a class="btn btn-danger" asp-action="DeleteDB">Delete DB: @dbname</a>
}